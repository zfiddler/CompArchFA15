`define AND and #50
`define OR or #50
`define NOT not #50
`define XOR xor #50


module FullAdder4bit(sum, carryout, overflow, a, b);
  output[3:0] sum;  // 2?s complement sum of a and b
  output carryout;  // Carry out of the summation of a and b
  output overflow;  // True if the calculation resulted in an overflow
  input[3:0] a;     // First operand in 2?s complement format
  input[3:0] b;     // Second operand in 2?s complement format
  wire[2:0] carry;
  fullAdder(sum[0], carry[0], a[0], b[0], 1'b0);
  fullAdder(sum[1], carry[1], a[1], b[1], carry[0]);
  fullAdder(sum[2], carry[2], a[2], b[2], carry[1]);
  fullAdder(sum[3], carry[3], a[3], b[3], carry[2]);
  `OR orgate(overflow, carry[3], carry[2]);

endmodule

module fullAdder(sum, carryout, a, b, carryin);
output sum, carryout;
input a, b, carryin;
wire AxorB, AandB, AxorBandC;

`XOR xorgate0(AxorB,a,b);
`XOR xorgate1(sum,AxorB, carryin);
`AND andgate0(AxorBandC,AxorB,carryin);
`AND andgate1(AandB, a, b);
`OR orgate(carryout, AandB, AxorBandC);
endmodule


module testFullAdder;
reg a, b, carryin;
wire sum, carryout;
fullAdder adder (sum,carryout,a,b,carryin);

initial begin
$display("A B Cin | Cout S | Cout S Expected");
a=0;b=0;carryin=0; #1000
$display("%b %b  %b  |  %b   %b |  0   0", a,b,carryin,carryout,sum);
a=0;b=0;carryin=1; #1000
$display("%b %b  %b  |  %b   %b |  0   1", a,b,carryin,carryout,sum);
a=0;b=1;carryin=0; #1000
$display("%b %b  %b  |  %b   %b |  0   1", a,b,carryin,carryout,sum);
a=0;b=1;carryin=1; #1000
$display("%b %b  %b  |  %b   %b |  1   0", a,b,carryin,carryout,sum);
a=1;b=0;carryin=0; #1000
$display("%b %b  %b  |  %b   %b |  0   1", a,b,carryin,carryout,sum);
a=1;b=0;carryin=1; #1000
$display("%b %b  %b  |  %b   %b |  1   0", a,b,carryin,carryout,sum);
a=1;b=1;carryin=0; #1000
$display("%b %b  %b  |  %b   %b |  1   0", a,b,carryin,carryout,sum);
a=1;b=1;carryin=1; #1000
$display("%b %b  %b  |  %b   %b |  1   1", a,b,carryin,carryout,sum);
end
endmodule
